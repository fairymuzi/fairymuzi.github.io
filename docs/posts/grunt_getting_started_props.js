import projectConfig from '/pagic.config.js';
export default {
    config: { "root": "/", ...projectConfig, branch: '' },
    'pagePath': "posts/grunt_getting_started.md",
    'layoutPath': "posts/_layout.tsx",
    'outputPath': "posts/grunt_getting_started.html",
    'title': "Grunt Getting Started",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>Grunt Getting Started</h1>\n<h2 id="grunt-%E7%AE%80%E4%BB%8B">Grunt 简介<a class="anchor" href="#grunt-%E7%AE%80%E4%BB%8B">§</a></h2>\n<p>每个前端开发工程师都会遇到前端文件校验、打包、压缩的问题。使用 Grunt 之前，你可能也使用过 Shell 脚本或者 Ant 脚本，来实现校验合并压缩等任务。</p>\n<p>Grunt 是一个基于任务的 JavaScript 项目命令行构建工具，运行于 Node.js 平台。 Grunt 能够从模板快速创建项目，合并、压缩和校验 CSS&amp;JS 文件，运行单元测试以及启动静态服务器。</p>\n<h3 id="grunt-%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84">grunt 是如何工作的？<a class="anchor" href="#grunt-%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84">§</a></h3>\n<p>刚刚接触 grunt ，举个例子可能不太恰当，但应该可以让你先比较准确的认识它。</p>\n<p>就好像一个万能工厂（grunt），只负责执行任务（Task），不关心每个任务到底都干了什么。 这些任务比如：</p>\n<ul>\n<li>clean:删除临时文件</li>\n<li>uglify:压缩</li>\n<li>qunit:测试</li>\n<li>concat:合并</li>\n</ul>\n<p>任务流程可能是这样的：</p>\n<ul>\n<li>task:clean</li>\n<li>task:uglify</li>\n<li>task:qunit</li>\n<li>task:concat</li>\n</ul>\n<h3 id="why-use-a-task-runner">Why use a task runner?<a class="anchor" href="#why-use-a-task-runner">§</a></h3>\n<blockquote>\n<p>In one word: automation. The less work you have to do when performing repetitive tasks like minification, compilation, unit testing, linting, etc, the easier your job becomes. After you\'ve configured it, a task runner can do most of that mundane work for you—and your team—with basically zero effort.</p>\n</blockquote>\n<h3 id="why-use-grunt">Why use Grunt?<a class="anchor" href="#why-use-grunt">§</a></h3>\n<blockquote>\n<p>The Grunt ecosystem is huge and it\'s growing every day. With literally hundreds of plugins to choose from, you can use Grunt to automate just about anything with a minimum of effort. If someone hasn\'t already built what you need, authoring and publishing your own Grunt plugin to npm is a breeze.</p>\n</blockquote>\n<h2 id="%E5%AE%89%E8%A3%85">安装<a class="anchor" href="#%E5%AE%89%E8%A3%85">§</a></h2>\n<p>安装 Grunt 之前得安装 nodejs 和 npm 。（以下步骤默认已经安装了 nodejs 和 npm ）</p>\n<h3 id="%E5%AE%89%E8%A3%85-grunt-cli">安装 grunt CLI<a class="anchor" href="#%E5%AE%89%E8%A3%85-grunt-cli">§</a></h3>\n<pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> -g grunt-cli\n</code></pre>\n<h3 id="%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-grunt">在项目中使用 grunt<a class="anchor" href="#%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-grunt">§</a></h3>\n<p>使用 grunt 之前，需要在项目根目录下创建文件 <code>package.json</code>，<code>package.json</code> 是用来存放 npm 的项目配置，与 grunt 关系最大的配置在 <code>devDependencies</code> 中。一个最基础的 <code>package.json</code> 如下：</p>\n<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"my-project-name"</span><span class="token punctuation">,</span>\n  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.1.0"</span><span class="token punctuation">,</span>\n  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"grunt"</span><span class="token operator">:</span> <span class="token string">"~0.4.1"</span><span class="token punctuation">,</span>\n    <span class="token property">"grunt-contrib-uglify"</span><span class="token operator">:</span> <span class="token string">"~0.2.2"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%AE%89%E8%A3%85-grunt">安装 grunt<a class="anchor" href="#%E5%AE%89%E8%A3%85-grunt">§</a></h3>\n<p>进入项目所在目录，运行：</p>\n<pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span>\n</code></pre>\n<p>npm 会根据 <code>package.json</code> 中的配置，将需要的 grunt 及其插件下载到你的项目目录中。</p>\n<p>当需要下载一个新的 grunt plugins 时，执行如下命令，会同步更新 <code>package.json</code> 中的 <code>devDependencies</code>。</p>\n<pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> grunt-cmd-concat --save-dev    <span class="token comment">#  --save-dev: Package will appear in your devDependencies.</span>\n</code></pre>\n<h3 id="%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90">简单例子<a class="anchor" href="#%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90">§</a></h3>\n<p>grunt 的任务都是在 <code>Gruntfile.js</code> 中定义的，<code>Gruntfile.js</code> 在项目根目录下，注意 <code>G</code> 得要大写，一个简单的 <code>Gruntfile.js</code> 如下：</p>\n<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">grunt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//Gruntfile基本框架</span>\n\n  <span class="token comment">// Project configuration.</span>\n  grunt<span class="token punctuation">.</span><span class="token method function property-access">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">//大多数Grunt任务需要依赖传入initConfig中的对象</span>\n    pkg<span class="token operator">:</span> grunt<span class="token punctuation">.</span><span class="token property-access">file</span><span class="token punctuation">.</span><span class="token method function property-access">readJSON</span><span class="token punctuation">(</span><span class="token string">\'package.json\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//以JSON格式读取package.json文件，后面用到了pkg.name</span>\n    uglify<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//uglify任务</span>\n      options<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//uglify任务的特殊的选项</span>\n        banner<span class="token operator">:</span> <span class="token string">\'/*! &lt;%= pkg.name %> &lt;%= grunt.template.today("yyyy-mm-dd") %> */\n\'</span>    <span class="token comment">//文件头部添加一行注释</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      build<span class="token operator">:</span> <span class="token punctuation">{</span>\n        src<span class="token operator">:</span> <span class="token string">\'helloworld.js\'</span><span class="token punctuation">,</span>    <span class="token comment">//源文件</span>\n        dest<span class="token operator">:</span> <span class="token string">\'helloworld.min.js\'</span>    <span class="token comment">//目标文件</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Load the plugin that provides the "uglify" task.</span>\n  grunt<span class="token punctuation">.</span><span class="token method function property-access">loadNpmTasks</span><span class="token punctuation">(</span><span class="token string">\'grunt-contrib-uglify\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Default task(s).</span>\n  grunt<span class="token punctuation">.</span><span class="token method function property-access">registerTask</span><span class="token punctuation">(</span><span class="token string">\'default\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'uglify\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>这个 Gruntfile 定义了 uglify 任务，可以在命令行中运行：</p>\n<pre class="language-shell"><code class="language-shell">grunt    <span class="token comment">#默认执行default任务</span>\n</code></pre>\n<p>或者</p>\n<pre class="language-shell"><code class="language-shell">grunt uglify    <span class="token comment">#执行uglify任务，将helloworld.js文件压缩到helloworld.min.js文件</span>\n</code></pre>\n<p>可以看到，新生成的 <code>helloworld.min.js</code> 文件是被压缩过的。</p>\n<h2 id="links">Links<a class="anchor" href="#links">§</a></h2>\n<ul>\n<li><a href="http://gruntjs.com/getting-started">http://gruntjs.com/getting-started</a></li>\n<li><a href="http://lostjs.com/2012/12/08/grunt-the-best/">Grunt -- 最好的前端构建框架</a></li>\n<li><a href="http://docs.spmjs.org/contrib/simple-grunt">关于Grunt，从一个简单的配置开始！</a></li>\n<li><a href="http://gruntjs.com/">Grunt官网</a></li>\n<li><a href="http://wiki.sankuai.com/pages/viewpage.action?pageId=70704478">Node环境搭建及对应的包管理</a></li>\n<li><a href="http://www.gruntjs.org/article/getting_started.html">Grunt中文帮助</a></li>\n</ul>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "Grunt Getting Started"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="grunt-%E7%AE%80%E4%BB%8B">Grunt 简介<a class="anchor" href="#grunt-%E7%AE%80%E4%BB%8B">§</a></h2>\n<p>每个前端开发工程师都会遇到前端文件校验、打包、压缩的问题。使用 Grunt 之前，你可能也使用过 Shell 脚本或者 Ant 脚本，来实现校验合并压缩等任务。</p>\n<p>Grunt 是一个基于任务的 JavaScript 项目命令行构建工具，运行于 Node.js 平台。 Grunt 能够从模板快速创建项目，合并、压缩和校验 CSS&amp;JS 文件，运行单元测试以及启动静态服务器。</p>\n<h3 id="grunt-%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84">grunt 是如何工作的？<a class="anchor" href="#grunt-%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84">§</a></h3>\n<p>刚刚接触 grunt ，举个例子可能不太恰当，但应该可以让你先比较准确的认识它。</p>\n<p>就好像一个万能工厂（grunt），只负责执行任务（Task），不关心每个任务到底都干了什么。 这些任务比如：</p>\n<ul>\n<li>clean:删除临时文件</li>\n<li>uglify:压缩</li>\n<li>qunit:测试</li>\n<li>concat:合并</li>\n</ul>\n<p>任务流程可能是这样的：</p>\n<ul>\n<li>task:clean</li>\n<li>task:uglify</li>\n<li>task:qunit</li>\n<li>task:concat</li>\n</ul>\n<h3 id="why-use-a-task-runner">Why use a task runner?<a class="anchor" href="#why-use-a-task-runner">§</a></h3>\n<blockquote>\n<p>In one word: automation. The less work you have to do when performing repetitive tasks like minification, compilation, unit testing, linting, etc, the easier your job becomes. After you\'ve configured it, a task runner can do most of that mundane work for you—and your team—with basically zero effort.</p>\n</blockquote>\n<h3 id="why-use-grunt">Why use Grunt?<a class="anchor" href="#why-use-grunt">§</a></h3>\n<blockquote>\n<p>The Grunt ecosystem is huge and it\'s growing every day. With literally hundreds of plugins to choose from, you can use Grunt to automate just about anything with a minimum of effort. If someone hasn\'t already built what you need, authoring and publishing your own Grunt plugin to npm is a breeze.</p>\n</blockquote>\n<h2 id="%E5%AE%89%E8%A3%85">安装<a class="anchor" href="#%E5%AE%89%E8%A3%85">§</a></h2>\n<p>安装 Grunt 之前得安装 nodejs 和 npm 。（以下步骤默认已经安装了 nodejs 和 npm ）</p>\n<h3 id="%E5%AE%89%E8%A3%85-grunt-cli">安装 grunt CLI<a class="anchor" href="#%E5%AE%89%E8%A3%85-grunt-cli">§</a></h3>\n<pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> -g grunt-cli\n</code></pre>\n<h3 id="%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-grunt">在项目中使用 grunt<a class="anchor" href="#%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-grunt">§</a></h3>\n<p>使用 grunt 之前，需要在项目根目录下创建文件 <code>package.json</code>，<code>package.json</code> 是用来存放 npm 的项目配置，与 grunt 关系最大的配置在 <code>devDependencies</code> 中。一个最基础的 <code>package.json</code> 如下：</p>\n<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"my-project-name"</span><span class="token punctuation">,</span>\n  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.1.0"</span><span class="token punctuation">,</span>\n  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"grunt"</span><span class="token operator">:</span> <span class="token string">"~0.4.1"</span><span class="token punctuation">,</span>\n    <span class="token property">"grunt-contrib-uglify"</span><span class="token operator">:</span> <span class="token string">"~0.2.2"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E5%AE%89%E8%A3%85-grunt">安装 grunt<a class="anchor" href="#%E5%AE%89%E8%A3%85-grunt">§</a></h3>\n<p>进入项目所在目录，运行：</p>\n<pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span>\n</code></pre>\n<p>npm 会根据 <code>package.json</code> 中的配置，将需要的 grunt 及其插件下载到你的项目目录中。</p>\n<p>当需要下载一个新的 grunt plugins 时，执行如下命令，会同步更新 <code>package.json</code> 中的 <code>devDependencies</code>。</p>\n<pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> grunt-cmd-concat --save-dev    <span class="token comment">#  --save-dev: Package will appear in your devDependencies.</span>\n</code></pre>\n<h3 id="%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90">简单例子<a class="anchor" href="#%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90">§</a></h3>\n<p>grunt 的任务都是在 <code>Gruntfile.js</code> 中定义的，<code>Gruntfile.js</code> 在项目根目录下，注意 <code>G</code> 得要大写，一个简单的 <code>Gruntfile.js</code> 如下：</p>\n<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">grunt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//Gruntfile基本框架</span>\n\n  <span class="token comment">// Project configuration.</span>\n  grunt<span class="token punctuation">.</span><span class="token method function property-access">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">//大多数Grunt任务需要依赖传入initConfig中的对象</span>\n    pkg<span class="token operator">:</span> grunt<span class="token punctuation">.</span><span class="token property-access">file</span><span class="token punctuation">.</span><span class="token method function property-access">readJSON</span><span class="token punctuation">(</span><span class="token string">\'package.json\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//以JSON格式读取package.json文件，后面用到了pkg.name</span>\n    uglify<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//uglify任务</span>\n      options<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//uglify任务的特殊的选项</span>\n        banner<span class="token operator">:</span> <span class="token string">\'/*! &lt;%= pkg.name %> &lt;%= grunt.template.today("yyyy-mm-dd") %> */\n\'</span>    <span class="token comment">//文件头部添加一行注释</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      build<span class="token operator">:</span> <span class="token punctuation">{</span>\n        src<span class="token operator">:</span> <span class="token string">\'helloworld.js\'</span><span class="token punctuation">,</span>    <span class="token comment">//源文件</span>\n        dest<span class="token operator">:</span> <span class="token string">\'helloworld.min.js\'</span>    <span class="token comment">//目标文件</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Load the plugin that provides the "uglify" task.</span>\n  grunt<span class="token punctuation">.</span><span class="token method function property-access">loadNpmTasks</span><span class="token punctuation">(</span><span class="token string">\'grunt-contrib-uglify\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Default task(s).</span>\n  grunt<span class="token punctuation">.</span><span class="token method function property-access">registerTask</span><span class="token punctuation">(</span><span class="token string">\'default\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'uglify\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>这个 Gruntfile 定义了 uglify 任务，可以在命令行中运行：</p>\n<pre class="language-shell"><code class="language-shell">grunt    <span class="token comment">#默认执行default任务</span>\n</code></pre>\n<p>或者</p>\n<pre class="language-shell"><code class="language-shell">grunt uglify    <span class="token comment">#执行uglify任务，将helloworld.js文件压缩到helloworld.min.js文件</span>\n</code></pre>\n<p>可以看到，新生成的 <code>helloworld.min.js</code> 文件是被压缩过的。</p>\n<h2 id="links">Links<a class="anchor" href="#links">§</a></h2>\n<ul>\n<li><a href="http://gruntjs.com/getting-started">http://gruntjs.com/getting-started</a></li>\n<li><a href="http://lostjs.com/2012/12/08/grunt-the-best/">Grunt -- 最好的前端构建框架</a></li>\n<li><a href="http://docs.spmjs.org/contrib/simple-grunt">关于Grunt，从一个简单的配置开始！</a></li>\n<li><a href="http://gruntjs.com/">Grunt官网</a></li>\n<li><a href="http://wiki.sankuai.com/pages/viewpage.action?pageId=70704478">Node环境搭建及对应的包管理</a></li>\n<li><a href="http://www.gruntjs.org/article/getting_started.html">Grunt中文帮助</a></li>\n</ul>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#grunt-%E7%AE%80%E4%BB%8B" }, "Grunt \u7B80\u4ECB"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#grunt-%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84" }, "grunt \u662F\u5982\u4F55\u5DE5\u4F5C\u7684\uFF1F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#why-use-a-task-runner" }, "Why use a task runner?")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#why-use-grunt" }, "Why use Grunt?")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%AE%89%E8%A3%85" }, "\u5B89\u88C5"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%AE%89%E8%A3%85-grunt-cli" }, "\u5B89\u88C5 grunt CLI")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-grunt" }, "\u5728\u9879\u76EE\u4E2D\u4F7F\u7528 grunt")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%AE%89%E8%A3%85-grunt" }, "\u5B89\u88C5 grunt")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90" }, "\u7B80\u5355\u4F8B\u5B50")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#links" }, "Links")))),
    'author': undefined,
    'contributors': [],
    'date': "2013-11-08T00:00:00.000Z",
    'updated': null,
    'excerpt': "Grunt 简介 每个前端开发工程师都会遇到前端文件校验、打包、压缩的问题。使用 Grunt 之前，你可能也使用过 Shell 脚本或者 Ant 脚本，来实现校验合并压缩等任务。 Grunt 是一个基于任务的 JavaScript 项目命令行构建工具，运行...",
    'cover': undefined,
    'categories': [
        "编程世界"
    ],
    'tags': [
        "Grunt",
        "JavaScript"
    ],
    'blog': {
        "isPost": false,
        "posts": [],
        "categories": [],
        "tags": []
    }
};
