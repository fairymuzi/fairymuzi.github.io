import projectConfig from '/pagic.config.js';
export default {
    config: { "root": "/", ...projectConfig, branch: '' },
    'pagePath': "posts/grunt_custom_task_guide.md",
    'layoutPath': "posts/_layout.tsx",
    'outputPath': "posts/grunt_custom_task_guide.html",
    'title': "Grunt Custom Task 指南",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>Grunt Custom Task 指南</h1>\n<p>阅读这篇之前，请了解 grunt ，可以参考 [Grunt Getting Starting]。</p>\n<p>在决定创建自己的 task 之前，最好搜索一下你的需求是不是已经有别人写好的了：<a href="http://gruntjs.com/plugins%E3%80%82">http://gruntjs.com/plugins。</a></p>\n<h2 id="%E7%AE%80%E4%BB%8B">简介<a class="anchor" href="#%E7%AE%80%E4%BB%8B">§</a></h2>\n<p>grunt 有一套强大的创建任务机制，不管是 grunt 官方任务（如 grunt-contrib-uglify ）还是 npm 上其他人提供的 grunt 任务（如 grunt-mocha ）亦或是你自己创建的任务（如 mod_revision ），都是使用同一套机制。故阅读 grunt 官方任务源码，有助于我们创建自己的任务。</p>\n<p>grunt 基于 node 开发，node 能做到的，在 grunt task 中都可以做到。</p>\n<p>一般来说，一个任务分三部分： <code>register task</code>，<code>load task</code>，<code>task config</code>。</p>\n<h2 id="%E9%80%89%E6%8B%A9-task-%E7%9A%84%E7%B1%BB%E5%9E%8B">选择 task 的类型<a class="anchor" href="#%E9%80%89%E6%8B%A9-task-%E7%9A%84%E7%B1%BB%E5%9E%8B">§</a></h2>\n<p>在创建自己的任务之前要明确，这个任务是单任务类型，还是多任务类型。</p>\n<h3 id="%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9E%8B">单任务类型<a class="anchor" href="#%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9E%8B">§</a></h3>\n<p>单任务适用于只有一个单一的使用场景，如 watch 只需要监听配置中指定的文件。</p>\n<h4 id="alias-task">Alias task<a class="anchor" href="#alias-task">§</a></h4>\n<pre class="language-js"><code class="language-js">grunt<span class="token punctuation">.</span><span class="token property-access">task</span><span class="token punctuation">.</span><span class="token method function property-access">registerTask</span><span class="token punctuation">(</span>taskName<span class="token punctuation">,</span> taskList<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>依次运行 <code>taskList</code> 中的任务，本文不做重点介绍。</p>\n<h4 id="function-task">Function task<a class="anchor" href="#function-task">§</a></h4>\n<pre class="language-js"><code class="language-js">grunt<span class="token punctuation">.</span><span class="token property-access">task</span><span class="token punctuation">.</span><span class="token method function property-access">registerTask</span><span class="token punctuation">(</span>taskName<span class="token punctuation">,</span> description<span class="token punctuation">,</span> taskFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>运行 <code>taskFunction</code> 中的内容</p>\n<h3 id="%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9E%8B">多任务类型<a class="anchor" href="#%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9E%8B">§</a></h3>\n<p>多任务适用于多种不同的使用场景，如在不同的环境中，<code>jshint</code> 的配置可以不一样。</p>\n<pre class="language-js"><code class="language-js">grunt<span class="token punctuation">.</span><span class="token property-access">task</span><span class="token punctuation">.</span><span class="token method function property-access">registerMultiTask</span><span class="token punctuation">(</span>taskName<span class="token punctuation">,</span> description<span class="token punctuation">,</span> taskFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>不同于单任务类型，<code>taskFunction</code> 中 <code>this</code> 会有一个 <code>target</code> 属性标识当前运行的哪一个 <code>target</code> ， <code>config</code> 中也比单任务多一个 <code>target</code> 层级。</p>\n<pre class="language-js"><code class="language-js">grunt<span class="token punctuation">.</span><span class="token method function property-access">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// watch 是一个单任务</span>\n  <span class="token comment">// 直接运行 grunt watch</span>\n  watch<span class="token operator">:</span> <span class="token punctuation">{</span>\n    files<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'**/*\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    tasks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'jshint\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// concat 是一个多任务</span>\n  <span class="token comment">// 运行 grunt concat:dist 与 grunt concat:dev 得到不同的结果</span>\n  <span class="token comment">// dist 和 dev 是两个 target</span>\n  concat<span class="token operator">:</span> <span class="token punctuation">{</span>\n    options<span class="token operator">:</span> <span class="token punctuation">{</span>\n      separator<span class="token operator">:</span> <span class="token string">\';\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    dist<span class="token operator">:</span> <span class="token punctuation">{</span>\n      src<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'src/intro.js\'</span><span class="token punctuation">,</span> <span class="token string">\'src/project.js\'</span><span class="token punctuation">,</span> <span class="token string">\'src/outro.js\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      dest<span class="token operator">:</span> <span class="token string">\'dist/built.js\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    dev<span class="token operator">:</span> <span class="token punctuation">{</span>\n      src<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token spread operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      dest<span class="token operator">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E5%90%91-task-%E4%BC%A0%E5%8F%82">向 task 传参<a class="anchor" href="#%E5%90%91-task-%E4%BC%A0%E5%8F%82">§</a></h2>\n<p>多数情况下， custom task 中会需要使用参数。</p>\n<p><code>taskFunction</code> 有多种方式接收参数，应根据不同的需求使用不同的方式。</p>\n<h3 id="%E5%9C%A8-config-%E4%B8%AD%E9%85%8D%E7%BD%AE">在 config 中配置<a class="anchor" href="#%E5%9C%A8-config-%E4%B8%AD%E9%85%8D%E7%BD%AE">§</a></h3>\n<p>grunt 可以通过 <code>this.options</code> 获取在 <code>config</code> 中设置的参数。</p>\n<pre class="language-js"><code class="language-js">grunt<span class="token punctuation">.</span><span class="token method function property-access">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  custom_task<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// task-level options</span>\n    options<span class="token operator">:</span> <span class="token punctuation">{</span>\n      comments<span class="token operator">:</span> <span class="token string">\'/* 自动生成，无需修改 */\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    dist<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// target-level options</span>\n      options<span class="token operator">:</span> <span class="token punctuation">{</span>\n        comments<span class="token operator">:</span> <span class="token string">\'/* 通过 dist target 生成 */\'</span>\n      <span class="token punctuation">}</span>\n      src<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'src/intro.js\'</span><span class="token punctuation">,</span> <span class="token string">\'src/project.js\'</span><span class="token punctuation">,</span> <span class="token string">\'src/outro.js\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      dest<span class="token operator">:</span> <span class="token string">\'dist/built.js\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    dev<span class="token operator">:</span> <span class="token punctuation">{</span>\n      src<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token spread operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      dest<span class="token operator">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \ngrunt<span class="token punctuation">.</span><span class="token property-access">task</span><span class="token punctuation">.</span><span class="token method function property-access">registerMutliTask</span><span class="token punctuation">(</span><span class="token string">\'custom_task\'</span><span class="token punctuation">,</span> <span class="token string">\'A custom task\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    comments<span class="token operator">:</span> <span class="token string">\'/* config 没有配置 */\'</span><span class="token punctuation">,</span>\n    words<span class="token operator">:</span> <span class="token string">\'hello world\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  grunt<span class="token punctuation">.</span><span class="token property-access">log</span><span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token property-access">comments</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  grunt<span class="token punctuation">.</span><span class="token property-access">log</span><span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token property-access">words</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">// grunt custom_task:dist</span>\n<span class="token comment">// /* 通过 dist target 生成 */</span>\n<span class="token comment">// hello world</span>\n<span class="token comment">// grunt custom_task:dev</span>\n<span class="token comment">// /* config 没有配置 */</span>\n<span class="token comment">// hello world</span>\n</code></pre>\n<p>优先级 <code>target-level options</code> &gt; <code>task-level options</code> &gt; <code>defaultsObj argument</code>。</p>\n<p>注意：单任务由于没有 <code>target</code> 故只包含两个层级。</p>\n<h3 id="%E8%BF%90%E8%A1%8C%E6%97%B6%E9%80%9A%E8%BF%87-arguments-%E4%BC%A0%E5%8F%82">运行时通过 arguments 传参<a class="anchor" href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%80%9A%E8%BF%87-arguments-%E4%BC%A0%E5%8F%82">§</a></h3>\n<p>grunt 命令中空格用来分隔多个 tasks。</p>\n<pre class="language-shell"><code class="language-shell">grunt jshint:dist uglify:dist concat:dist\n<span class="token comment"># 相当于</span>\ngrunt jshint:dist\ngrunt uglify:dist\ngrunt concat:dist\n \n<span class="token comment"># 若想在 custom task 中接受命令行中的参数， grunt 提供了以冒号分隔 arguments 的机制</span>\ngrunt custom_single_task:arg1:arg2\ngrunt custom_mutli_task:target:arg1:arg2\n</code></pre>\n<p>参考如下例子：</p>\n<pre class="language-js"><code class="language-js">grunt<span class="token punctuation">.</span><span class="token property-access">task</span><span class="token punctuation">.</span><span class="token method function property-access">registerMutliTask</span><span class="token punctuation">(</span><span class="token string">\'custom_single_task\'</span><span class="token punctuation">,</span> <span class="token string">\'A custom single task\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  grunt<span class="token punctuation">.</span><span class="token property-access">log</span><span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 也可以通过 arguments 访问到</span>\ngrunt<span class="token punctuation">.</span><span class="token property-access">task</span><span class="token punctuation">.</span><span class="token method function property-access">registerMutliTask</span><span class="token punctuation">(</span><span class="token string">\'custom_task\'</span><span class="token punctuation">,</span> <span class="token string">\'A custom task\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  grunt<span class="token punctuation">.</span><span class="token property-access">log</span><span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E8%BF%90%E8%A1%8C%E6%97%B6%E9%80%9A%E8%BF%87-option-%E4%BC%A0%E5%8F%82">运行时通过 option 传参<a class="anchor" href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%80%9A%E8%BF%87-option-%E4%BC%A0%E5%8F%82">§</a></h3>\n<p>另一种传参机制是通过形如 <code>--env=dist</code> 的形式，使得多个任务可以共用一个参数。</p>\n<pre class="language-shell"><code class="language-shell">grunt custom_task1 costom_task2 costom_task3:target --env<span class="token operator">=</span>dist\n</code></pre>\n<p>在 <code>taskFunction</code> 中可以通过 <code>grunt.opton(key[, val])</code> 获得这种参数：</p>\n<pre class="language-js"><code class="language-js">grunt<span class="token punctuation">.</span><span class="token property-access">task</span><span class="token punctuation">.</span><span class="token method function property-access">registerTask</span><span class="token punctuation">(</span><span class="token string">\'custom_task\'</span><span class="token punctuation">,</span> <span class="token string">\'A custom task\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> env <span class="token operator">=</span> grunt<span class="token punctuation">.</span><span class="token method function property-access">option</span><span class="token punctuation">(</span><span class="token string">\'env\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  grunt<span class="token punctuation">.</span><span class="token method function property-access">option</span><span class="token punctuation">(</span><span class="token string">\'stack\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  grunt<span class="token punctuation">.</span><span class="token property-access">log</span><span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>若使用的是 <code>--env</code> 则 <code>env</code> 的值为 <code>true</code>。</p>\n<p>需要注意的是，不要和其他 grunt 自带的参数使用混淆了，它们包括：</p>\n<ul>\n<li>--help, -h</li>\n<li>--base</li>\n<li>--no-color</li>\n<li>--gruntfile</li>\n<li>--debug, -d</li>\n<li>--stack</li>\n<li>--force, -f</li>\n<li>--tasks</li>\n<li>--npm</li>\n<li>--no-write</li>\n<li>--verbose, -v</li>\n<li>--version, -V</li>\n<li>--completion</li>\n</ul>\n<h2 id="%E5%BC%82%E6%AD%A5%E6%9C%BA%E5%88%B6">异步机制<a class="anchor" href="#%E5%BC%82%E6%AD%A5%E6%9C%BA%E5%88%B6">§</a></h2>\n<p>对于一个异步任务，需要使用 <code>this.async</code> 方法声明它是异步的，然后在执行完成时调用 <code>this.async()()</code>，举例如下：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// Tell Grunt this task is asynchronous.</span>\n<span class="token keyword">var</span> done <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Your async code.</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Let\'s simulate an error, sometimes.</span>\n  <span class="token keyword">var</span> success <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">;</span>\n  <span class="token comment">// All done!</span>\n<span class="token function">  done</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>注意，如果有多个出口，需要在每个出口都调用 <code>done()</code>。</p>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "Grunt Custom Task \u6307\u5357"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<p>阅读这篇之前，请了解 grunt ，可以参考 [Grunt Getting Starting]。</p>\n<p>在决定创建自己的 task 之前，最好搜索一下你的需求是不是已经有别人写好的了：<a href="http://gruntjs.com/plugins%E3%80%82">http://gruntjs.com/plugins。</a></p>\n<h2 id="%E7%AE%80%E4%BB%8B">简介<a class="anchor" href="#%E7%AE%80%E4%BB%8B">§</a></h2>\n<p>grunt 有一套强大的创建任务机制，不管是 grunt 官方任务（如 grunt-contrib-uglify ）还是 npm 上其他人提供的 grunt 任务（如 grunt-mocha ）亦或是你自己创建的任务（如 mod_revision ），都是使用同一套机制。故阅读 grunt 官方任务源码，有助于我们创建自己的任务。</p>\n<p>grunt 基于 node 开发，node 能做到的，在 grunt task 中都可以做到。</p>\n<p>一般来说，一个任务分三部分： <code>register task</code>，<code>load task</code>，<code>task config</code>。</p>\n<h2 id="%E9%80%89%E6%8B%A9-task-%E7%9A%84%E7%B1%BB%E5%9E%8B">选择 task 的类型<a class="anchor" href="#%E9%80%89%E6%8B%A9-task-%E7%9A%84%E7%B1%BB%E5%9E%8B">§</a></h2>\n<p>在创建自己的任务之前要明确，这个任务是单任务类型，还是多任务类型。</p>\n<h3 id="%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9E%8B">单任务类型<a class="anchor" href="#%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9E%8B">§</a></h3>\n<p>单任务适用于只有一个单一的使用场景，如 watch 只需要监听配置中指定的文件。</p>\n<h4 id="alias-task">Alias task<a class="anchor" href="#alias-task">§</a></h4>\n<pre class="language-js"><code class="language-js">grunt<span class="token punctuation">.</span><span class="token property-access">task</span><span class="token punctuation">.</span><span class="token method function property-access">registerTask</span><span class="token punctuation">(</span>taskName<span class="token punctuation">,</span> taskList<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>依次运行 <code>taskList</code> 中的任务，本文不做重点介绍。</p>\n<h4 id="function-task">Function task<a class="anchor" href="#function-task">§</a></h4>\n<pre class="language-js"><code class="language-js">grunt<span class="token punctuation">.</span><span class="token property-access">task</span><span class="token punctuation">.</span><span class="token method function property-access">registerTask</span><span class="token punctuation">(</span>taskName<span class="token punctuation">,</span> description<span class="token punctuation">,</span> taskFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>运行 <code>taskFunction</code> 中的内容</p>\n<h3 id="%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9E%8B">多任务类型<a class="anchor" href="#%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9E%8B">§</a></h3>\n<p>多任务适用于多种不同的使用场景，如在不同的环境中，<code>jshint</code> 的配置可以不一样。</p>\n<pre class="language-js"><code class="language-js">grunt<span class="token punctuation">.</span><span class="token property-access">task</span><span class="token punctuation">.</span><span class="token method function property-access">registerMultiTask</span><span class="token punctuation">(</span>taskName<span class="token punctuation">,</span> description<span class="token punctuation">,</span> taskFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>不同于单任务类型，<code>taskFunction</code> 中 <code>this</code> 会有一个 <code>target</code> 属性标识当前运行的哪一个 <code>target</code> ， <code>config</code> 中也比单任务多一个 <code>target</code> 层级。</p>\n<pre class="language-js"><code class="language-js">grunt<span class="token punctuation">.</span><span class="token method function property-access">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// watch 是一个单任务</span>\n  <span class="token comment">// 直接运行 grunt watch</span>\n  watch<span class="token operator">:</span> <span class="token punctuation">{</span>\n    files<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'**/*\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    tasks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'jshint\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// concat 是一个多任务</span>\n  <span class="token comment">// 运行 grunt concat:dist 与 grunt concat:dev 得到不同的结果</span>\n  <span class="token comment">// dist 和 dev 是两个 target</span>\n  concat<span class="token operator">:</span> <span class="token punctuation">{</span>\n    options<span class="token operator">:</span> <span class="token punctuation">{</span>\n      separator<span class="token operator">:</span> <span class="token string">\';\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    dist<span class="token operator">:</span> <span class="token punctuation">{</span>\n      src<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'src/intro.js\'</span><span class="token punctuation">,</span> <span class="token string">\'src/project.js\'</span><span class="token punctuation">,</span> <span class="token string">\'src/outro.js\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      dest<span class="token operator">:</span> <span class="token string">\'dist/built.js\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    dev<span class="token operator">:</span> <span class="token punctuation">{</span>\n      src<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token spread operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      dest<span class="token operator">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E5%90%91-task-%E4%BC%A0%E5%8F%82">向 task 传参<a class="anchor" href="#%E5%90%91-task-%E4%BC%A0%E5%8F%82">§</a></h2>\n<p>多数情况下， custom task 中会需要使用参数。</p>\n<p><code>taskFunction</code> 有多种方式接收参数，应根据不同的需求使用不同的方式。</p>\n<h3 id="%E5%9C%A8-config-%E4%B8%AD%E9%85%8D%E7%BD%AE">在 config 中配置<a class="anchor" href="#%E5%9C%A8-config-%E4%B8%AD%E9%85%8D%E7%BD%AE">§</a></h3>\n<p>grunt 可以通过 <code>this.options</code> 获取在 <code>config</code> 中设置的参数。</p>\n<pre class="language-js"><code class="language-js">grunt<span class="token punctuation">.</span><span class="token method function property-access">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  custom_task<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// task-level options</span>\n    options<span class="token operator">:</span> <span class="token punctuation">{</span>\n      comments<span class="token operator">:</span> <span class="token string">\'/* 自动生成，无需修改 */\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    dist<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// target-level options</span>\n      options<span class="token operator">:</span> <span class="token punctuation">{</span>\n        comments<span class="token operator">:</span> <span class="token string">\'/* 通过 dist target 生成 */\'</span>\n      <span class="token punctuation">}</span>\n      src<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'src/intro.js\'</span><span class="token punctuation">,</span> <span class="token string">\'src/project.js\'</span><span class="token punctuation">,</span> <span class="token string">\'src/outro.js\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      dest<span class="token operator">:</span> <span class="token string">\'dist/built.js\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    dev<span class="token operator">:</span> <span class="token punctuation">{</span>\n      src<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token spread operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      dest<span class="token operator">:</span> <span class="token string">\'...\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \ngrunt<span class="token punctuation">.</span><span class="token property-access">task</span><span class="token punctuation">.</span><span class="token method function property-access">registerMutliTask</span><span class="token punctuation">(</span><span class="token string">\'custom_task\'</span><span class="token punctuation">,</span> <span class="token string">\'A custom task\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    comments<span class="token operator">:</span> <span class="token string">\'/* config 没有配置 */\'</span><span class="token punctuation">,</span>\n    words<span class="token operator">:</span> <span class="token string">\'hello world\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  grunt<span class="token punctuation">.</span><span class="token property-access">log</span><span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token property-access">comments</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  grunt<span class="token punctuation">.</span><span class="token property-access">log</span><span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token property-access">words</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">// grunt custom_task:dist</span>\n<span class="token comment">// /* 通过 dist target 生成 */</span>\n<span class="token comment">// hello world</span>\n<span class="token comment">// grunt custom_task:dev</span>\n<span class="token comment">// /* config 没有配置 */</span>\n<span class="token comment">// hello world</span>\n</code></pre>\n<p>优先级 <code>target-level options</code> &gt; <code>task-level options</code> &gt; <code>defaultsObj argument</code>。</p>\n<p>注意：单任务由于没有 <code>target</code> 故只包含两个层级。</p>\n<h3 id="%E8%BF%90%E8%A1%8C%E6%97%B6%E9%80%9A%E8%BF%87-arguments-%E4%BC%A0%E5%8F%82">运行时通过 arguments 传参<a class="anchor" href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%80%9A%E8%BF%87-arguments-%E4%BC%A0%E5%8F%82">§</a></h3>\n<p>grunt 命令中空格用来分隔多个 tasks。</p>\n<pre class="language-shell"><code class="language-shell">grunt jshint:dist uglify:dist concat:dist\n<span class="token comment"># 相当于</span>\ngrunt jshint:dist\ngrunt uglify:dist\ngrunt concat:dist\n \n<span class="token comment"># 若想在 custom task 中接受命令行中的参数， grunt 提供了以冒号分隔 arguments 的机制</span>\ngrunt custom_single_task:arg1:arg2\ngrunt custom_mutli_task:target:arg1:arg2\n</code></pre>\n<p>参考如下例子：</p>\n<pre class="language-js"><code class="language-js">grunt<span class="token punctuation">.</span><span class="token property-access">task</span><span class="token punctuation">.</span><span class="token method function property-access">registerMutliTask</span><span class="token punctuation">(</span><span class="token string">\'custom_single_task\'</span><span class="token punctuation">,</span> <span class="token string">\'A custom single task\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  grunt<span class="token punctuation">.</span><span class="token property-access">log</span><span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 也可以通过 arguments 访问到</span>\ngrunt<span class="token punctuation">.</span><span class="token property-access">task</span><span class="token punctuation">.</span><span class="token method function property-access">registerMutliTask</span><span class="token punctuation">(</span><span class="token string">\'custom_task\'</span><span class="token punctuation">,</span> <span class="token string">\'A custom task\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  grunt<span class="token punctuation">.</span><span class="token property-access">log</span><span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E8%BF%90%E8%A1%8C%E6%97%B6%E9%80%9A%E8%BF%87-option-%E4%BC%A0%E5%8F%82">运行时通过 option 传参<a class="anchor" href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%80%9A%E8%BF%87-option-%E4%BC%A0%E5%8F%82">§</a></h3>\n<p>另一种传参机制是通过形如 <code>--env=dist</code> 的形式，使得多个任务可以共用一个参数。</p>\n<pre class="language-shell"><code class="language-shell">grunt custom_task1 costom_task2 costom_task3:target --env<span class="token operator">=</span>dist\n</code></pre>\n<p>在 <code>taskFunction</code> 中可以通过 <code>grunt.opton(key[, val])</code> 获得这种参数：</p>\n<pre class="language-js"><code class="language-js">grunt<span class="token punctuation">.</span><span class="token property-access">task</span><span class="token punctuation">.</span><span class="token method function property-access">registerTask</span><span class="token punctuation">(</span><span class="token string">\'custom_task\'</span><span class="token punctuation">,</span> <span class="token string">\'A custom task\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> env <span class="token operator">=</span> grunt<span class="token punctuation">.</span><span class="token method function property-access">option</span><span class="token punctuation">(</span><span class="token string">\'env\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  grunt<span class="token punctuation">.</span><span class="token method function property-access">option</span><span class="token punctuation">(</span><span class="token string">\'stack\'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  grunt<span class="token punctuation">.</span><span class="token property-access">log</span><span class="token punctuation">.</span><span class="token method function property-access">write</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>若使用的是 <code>--env</code> 则 <code>env</code> 的值为 <code>true</code>。</p>\n<p>需要注意的是，不要和其他 grunt 自带的参数使用混淆了，它们包括：</p>\n<ul>\n<li>--help, -h</li>\n<li>--base</li>\n<li>--no-color</li>\n<li>--gruntfile</li>\n<li>--debug, -d</li>\n<li>--stack</li>\n<li>--force, -f</li>\n<li>--tasks</li>\n<li>--npm</li>\n<li>--no-write</li>\n<li>--verbose, -v</li>\n<li>--version, -V</li>\n<li>--completion</li>\n</ul>\n<h2 id="%E5%BC%82%E6%AD%A5%E6%9C%BA%E5%88%B6">异步机制<a class="anchor" href="#%E5%BC%82%E6%AD%A5%E6%9C%BA%E5%88%B6">§</a></h2>\n<p>对于一个异步任务，需要使用 <code>this.async</code> 方法声明它是异步的，然后在执行完成时调用 <code>this.async()()</code>，举例如下：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// Tell Grunt this task is asynchronous.</span>\n<span class="token keyword">var</span> done <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Your async code.</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Let\'s simulate an error, sometimes.</span>\n  <span class="token keyword">var</span> success <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">;</span>\n  <span class="token comment">// All done!</span>\n<span class="token function">  done</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>注意，如果有多个出口，需要在每个出口都调用 <code>done()</code>。</p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E7%AE%80%E4%BB%8B" }, "\u7B80\u4ECB")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E9%80%89%E6%8B%A9-task-%E7%9A%84%E7%B1%BB%E5%9E%8B" }, "\u9009\u62E9 task \u7684\u7C7B\u578B"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%8D%95%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9E%8B" }, "\u5355\u4EFB\u52A1\u7C7B\u578B"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%B1%BB%E5%9E%8B" }, "\u591A\u4EFB\u52A1\u7C7B\u578B")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%90%91-task-%E4%BC%A0%E5%8F%82" }, "\u5411 task \u4F20\u53C2"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%9C%A8-config-%E4%B8%AD%E9%85%8D%E7%BD%AE" }, "\u5728 config \u4E2D\u914D\u7F6E")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%80%9A%E8%BF%87-arguments-%E4%BC%A0%E5%8F%82" }, "\u8FD0\u884C\u65F6\u901A\u8FC7 arguments \u4F20\u53C2")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%80%9A%E8%BF%87-option-%E4%BC%A0%E5%8F%82" }, "\u8FD0\u884C\u65F6\u901A\u8FC7 option \u4F20\u53C2")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%BC%82%E6%AD%A5%E6%9C%BA%E5%88%B6" }, "\u5F02\u6B65\u673A\u5236")))),
    'author': undefined,
    'contributors': [],
    'date': "2013-12-04T00:00:00.000Z",
    'updated': null,
    'excerpt': "阅读这篇之前，请了解 grunt ，可以参考 [Grunt Getting Starting]。 在决定创建自己的 task 之前，最好搜索一下你的需求是不是已经有别人写好的了：http://gruntjs.com/plugins。 简介 grunt 有一套强大的创建任务机制，不管是...",
    'cover': undefined,
    'categories': [
        "编程世界"
    ],
    'tags': [
        "Grunt",
        "JavaScript"
    ],
    'blog': {
        "isPost": false,
        "posts": [],
        "categories": [],
        "tags": []
    }
};
